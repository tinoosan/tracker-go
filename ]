"use client";

import { useEffect, useState, useRef } from "react";
import { useRouter } from "next/navigation";

interface Category {
  Id: string;
  Name: string;
}

// Function to generate a consistent background color based on the category name
const getCategoryColor = (categoryName: string) => {
  const colors = ["bg-red-500", "bg-green-500", "bg-blue-500", "bg-yellow-500", "bg-purple-500", "bg-indigo-500", "bg-pink-500"];
  let hash = 0;
  for (let i = 0; i < categoryName.length; i++) {
    hash = categoryName.charCodeAt(i) + ((hash << 5) - hash);
  }
  const index = Math.abs(hash) % colors.length;
  return colors[index];
};

export default function CategoriesPage() {
  const [categories, setCategories] = useState<Category[]>([]);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();

  // States to control menus (copied from Dashboard)
  const [menuOpen1, setMenuOpen1] = useState(false);
  const [menuOpen2, setMenuOpen2] = useState(false);
  const menu1Ref = useRef<HTMLUListElement>(null);
  const menu2Ref = useRef<HTMLUListElement>(null);
  const button1Ref = useRef<HTMLButtonElement>(null);
  const button2Ref = useRef<HTMLButtonElement>(null);

  // State for individual category menus
  const [openCategoryMenuId, setOpenCategoryMenuId] = useState<string | null>(null);
  const categoryMenuRef = useRef<HTMLDivElement>(null); // Ref for outside click detection

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await fetch(
          "http://localhost:8080/api/v1/users/categories",
          {
            method: "GET",
            credentials: "include",
          },
        );
        if (!response.ok) {
          if (response.status === 401) {
            router.push("/login");
          }
          const errorData = await response.json();
          throw new Error(errorData.error || "Failed to fetch categories");
        }
        const data = await response.json();
        setCategories(data);
      } catch (err: unknown) {
        if (err instanceof Error) {
          setError(err.message || "Something went wrong");
        }
      }
    };

    fetchCategories();
  }, [router]);

  // useEffect for handling clicks outside the menus (copied from Dashboard)
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        menuOpen1 &&
        menu1Ref.current &&
        !menu1Ref.current.contains(event.target as Node) &&
        button1Ref.current &&
        !button1Ref.current.contains(event.target as Node)
      ) {
        setMenuOpen1(false);
      }
      if (
        menuOpen2 &&
        menu2Ref.current &&
        !menu2Ref.current.contains(event.target as Node) &&
        button2Ref.current &&
        !button2Ref.current.contains(event.target as Node)
      ) {
        setMenuOpen2(false);
      }
      // Handle clicks outside the category menu
      if (
        openCategoryMenuId &&
        categoryMenuRef.current &&
        !categoryMenuRef.current.contains(event.target as Node)
      ) {
        setOpenCategoryMenuId(null);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [menuOpen1, menuOpen2, openCategoryMenuId]);

  // Functions to toggle menus (copied from Dashboard)
  const toggleMenu1 = () => {
    setMenuOpen1(!menuOpen1);
    if (!menuOpen1) {
      setMenuOpen2(false);
    }
  };

  const toggleMenu2 = () => {
    setMenuOpen2(!menuOpen2);
    if (!menuOpen2) {
      setMenuOpen1(false);
    }
  };

  const toggleCategoryMenu = (categoryId: string) => {
    setOpenCategoryMenuId(openCategoryMenuId === categoryId ? null : categoryId);
  };

  return (
    <div className="h-screen bg-gray-900 p-6 text-gray-100">
      {/* Navbar (copied from Dashboard) */}
      <div className="navbar bg-gray-800 text-gray-100 shadow-lg rounded-lg mb-6 relative">
        <div className="flex-none relative">
          <button
            ref={button1Ref}
            className="btn btn-square btn-ghost"
            onClick={toggleMenu1}
          >
            {/* First menu toggle button */}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              className="inline-block h-5 w-5 stroke-current"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M4 6h16M4 12h16M4 18h16"
              ></path>
            </svg>
          </button>

          {/* Conditionally render your first menu */}
          {menuOpen1 && (
            <ul
              ref={menu1Ref}
              className="menu bg-gray-700 rounded-box w-56 absolute top-12 left-0 z-50 shadow"
            >
              <li>
                <a
                  onClick={() => router.push("/dashboard")}
                  className="hover:bg-gray-600 cursor-pointer"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 mr-2"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
                    />
                  </svg>
                  Transactions
                </a>
              </li>
              <li>
                <a className="hover:bg-gray-600">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 mr-2"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  Categories
                </a>
              </li>
              <li>
                <a onClick={() => router.push("/insights")} className="hover:bg-gray-600 cursor-pointer">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 mr-2"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth="2"
                      d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                    />
                  </svg>
                  Insights
                </a>
              </li>
            </ul>
          )}
        </div>
        <div className="flex-1">
          <a className="btn btn-ghost text-xl font-mono">tracker</a>
        </div>

        <div className="flex-none relative">
          <button
            ref={button2Ref}
            className="btn btn-square btn-ghost"
            onClick={toggleMenu2}
          >
            {/* Second menu toggle button */}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              className="inline-block h-5 w-5 stroke-current"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z"
              ></path>
            </svg>
          </button>

          {/* Conditionally render your second menu */}
          {menuOpen2 && (
            <ul
              ref={menu2Ref}
              className="menu bg-gray-700 rounded-box w-56 absolute top-12 right-0 z-50 shadow"
            >
              <li>
                <a className="hover:bg-gray-600">Profile</a>
              </li>
              <li>
                <a className="hover:bg-gray-600">Settings</a>
              </li>
              <li>
                <a className="hover:bg-gray-600">Sign out</a>
              </li>
            </ul>
          )}
        </div>
      </div>

      <div className="max-w-4xl mx-auto bg-gray-800 rounded-lg shadow-md p-8">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-2xl font-bold font-mono">Manage Categories</h2>
          <button
            onClick={() => router.push("/add-category")} // Create this page later
            className="bg-gray-700 hover:bg-gray-600 text-gray-100 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline font-mono"
          >
            Add Category
          </button>
        </div>

        {error && <p className="text-red-500 mb-4">{error}</p>}

        {categories.length === 0 && !error && (
          <p className="text-gray-400 font-mono">Loading categories...</p>
        )}

        {categories.length > 0 && (
          <div className="space-y-4">
            {categories.map((category) => (
              <div
                key={category.Id}
                className="flex items-center justify-between p-4 border border-gray-700 rounded-lg shadow-sm hover:shadow-lg transition-shadow bg-gray-800 hover:bg-gray-700"
              >
                <div className="flex items-center space-x-4">
                  <div className={`w-10 h-10 flex items-center justify-center rounded-full font-bold font-mono uppercase text-gray-100 ${getCategoryColor(category.Name)}`}>
                    {category.Name.charAt(0)}
                  </div>
                  <p className="font-mono">{category.Name}</p>
                </div>
                <div className="relative">
                  <button
                    onClick={() => toggleCategoryMenu(category.Id)}
                    className="btn btn-ghost btn-sm"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      viewBox="0 0 24 24"
                      className="inline-block w-5 h-5 stroke-current"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="2"
                        d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z"
                      ></path>
                    </svg>
                  </button>
                  {openCategoryMenuId === category.Id && (
                    <div ref={categoryMenuRef} className="absolute right-0 mt-2 w-36 bg-gray-700 rounded-md shadow-lg z-10">
                      <a
                        href="#"
                        className="block px-4 py-2 text-sm text-gray-100 hover:bg-gray-600 font-mono"
                        onClick={() => {
                          console.log(`Edit category: ${category.Name}`);
                          setOpenCategoryMenuId(null);
                        }}
                      >
                        Edit
                      </a>
                      <a
                        href="#"
                        className="block px-4 py-2 text-sm text-gray-100 hover:bg-gray-600 font-mono"
                        onClick={() => {
                          console.log(`Delete category: ${category.Name}`);
                          setOpenCategoryMenuId(null);
                        }}
                      >
                        Delete
                      </a>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
